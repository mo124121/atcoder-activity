S = int(input())

# 座標を生成する
def gen_pos(W, H, w=0, h=0):
    return 0, W - w, H - h, 0, W, H


W = 0
# S<W**2となる最小のWを探す
W = int(S**0.5)
while W**2 < S:
    W += 1
# S<W*Hとなる最小のHを探す
H = (S + W - 1) // W
if S == H * W:
    print(*gen_pos(W, H))
    exit()
# あとは適当にwとhを定める
h = 1
w = H * W - S
print(*gen_pos(W, H, w, h))


"""
三角形の面積
底辺×高さ÷2

何か出せばいいので楽なはず、ほんまか？
割り算したくないなら、
面積Sの長方形を出してきて、その半分

座標空間は<10**9
S<10**18

問題は素数の時上の条件だと入らない

長方形の面積-角っこを削り取る3角形の大きさ、的な？

ちょっとＡＧＣ感あるどうしよ

S=2*W*H-(W*h+w*H+(W-w)*(H-h))
 =2*W*H-(W*h+w*H+W*H-w*H-W*h+w*h)
 =W*H-w*h
W*H-w*hで全ての数を表せるか？
証明とか無理やわ、ただ題意的にはこれで行けてるはず
さてどう値を決めるか？

全列挙はしたくなるがどう削るか？
S<W*HとなるWとHを見つける->w<W,h<Hで見つかれば、というか見つかるくない？
(n+1)**2=n**2+2n+1

S<W**2となる最小のWを探す
S<W*Hとなる最小のHを探す
あとは適当にwとhを定める
座標を生成する

1/3WA 5/16WA
面倒なので解説見る



"""
