#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, M: int, a: "List[int]", b: "List[int]"):
    graph=defaultdict(list)
    for i in range(M):
        graph[a[i]].append(b[i])
        graph[b[i]].append(a[i])
    ret=0
    for node, edges in graph.items():
        count=0
        for e in edges:
            if node>e:
                count+=1
        if count==1:
            ret+=1
    print(ret)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int()] * (M)  # type: "List[int]"
    b = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, M, a, b)

if __name__ == '__main__':
    main()
