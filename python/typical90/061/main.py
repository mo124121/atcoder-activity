#!/usr/bin/env python3
import sys
from collections import deque

def solve(Q: int, t: "List[int]", x: "List[int]"):
    MOD=Q
    yama=[0]*Q
    left=MOD-1
    right=0
    ret=[]
    for i in range(Q):
        if t[i]==1:
            yama[right]=x[i]
            right=right+1
        elif t[i]==2:
            yama[left]=x[i]
            left=left-1
        else:
            ret.append(yama[(right-x[i])%MOD])
        
    print(*ret,sep="\n")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    Q = int(next(tokens))  # type: int
    t = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        t[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(Q, t, x)

if __name__ == '__main__':
    main()
