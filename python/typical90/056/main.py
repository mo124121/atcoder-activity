#!/usr/bin/env python3
import sys

NO = "Impossible"  # type: str


def solve(N: int, S: int, A: "List[int]", B: "List[int]"):
    dp = [[False] * (S + 1) for _ in range(N + 1)]
    dp[0][0] = True
    for i in range(N):
        for j in range(S):
            if dp[i][j]:
                if j + A[i] <= S:
                    dp[i + 1][j + A[i]] = True
                if j + B[i] <= S:
                    dp[i + 1][j + B[i]] = True

    if dp[N][S]:
        ret = ""
        S_pre = S
        for i in reversed(range(N)):
            if S_pre - A[i] >= 0 and dp[i][S_pre - A[i]]:
                S_pre = S_pre - A[i]
                ret += "A"
            elif S_pre - B[i] >= 0 and dp[i][S_pre - B[i]]:
                S_pre = S_pre - B[i]
                ret += "B"
        print(ret[::-1])
    else:
        print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, S = map(int, input().split())
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i], B[i] = map(int, input().split())
    solve(N, S, A, B)


if __name__ == "__main__":
    main()


"""
差をとって操作による変動で考える
縮まるように貪欲　→　うまくいかなそう

N<100
全パターン2^N

解説後
普通にDPでいい
経路復元がミソ、dp時に保存せずにさかのぼる感じ


"""
