#!/usr/bin/env python3
import sys
from itertools import permutations


def solve(N: int, A: "List[List[int]]", M: int, X: "List[int]", Y: "List[int]"):
    INF = 1000 * 10 + 1
    ret = INF
    kirai_list = {}
    for i in range(M):
        kirai_list[(X[i] - 1, Y[i] - 1)] = True
        kirai_list[(Y[i] - 1, X[i] - 1)] = True
    for pat in permutations(range(N)):
        kirai_flag = False
        for i in range(len(pat) - 1):
            if (pat[i], pat[i + 1]) in kirai_list:
                kirai_flag = True
        if kirai_flag:
            continue

        t = 0
        for i in range(len(pat)):
            t += A[pat[i]][i]
        ret = min(ret, t)
    if ret == INF:
        print(-1)
    else:
        print(ret)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [
        [int(next(tokens)) for _ in range(N)] for _ in range(N)
    ]  # type: "List[List[int]]"
    M = int(next(tokens))  # type: int
    X = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, A, M, X, Y)


if __name__ == "__main__":
    main()
