#!/usr/bin/env python3
from collections import deque
import sys


def find_farthest(G, start):
    d_far = 0
    node_g = start
    st = deque()  # 深さ探索=stack
    seen = {}
    st.append((node_g, d_far))
    seen[start] = 0

    while len(st):
        node, d = st.popleft()
        seen[node] = d
        if d_far < d:
            d_far = d
            node_g = node
        for node_to in G[node]:
            if node_to not in seen:
                st.append((node_to, d + 1))

    return node_g, d_far


def solve(N: int, A: "List[int]", B: "List[int]"):
    G = [[] for _ in range(N + 1)]
    for i in range(N - 1):
        G[A[i]].append(B[i])
        G[B[i]].append(A[i])

    terminal, _ = find_farthest(G, 1)
    _, ret = find_farthest(G, terminal)

    print(ret + 1)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == "__main__":
    main()
