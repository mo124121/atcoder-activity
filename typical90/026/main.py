import sys
from collections import defaultdict, deque


def solve(N: int, A: "List[int]", B: "List[int]"):

    G = defaultdict(list)
    for i in range(N - 1):
        G[A[i]].append(B[i])
        G[B[i]].append(A[i])

    ret = {}
    for k, e in G.items():
        if len(e) == 1:
            ret[k] = True
            if len(ret) == N // 2:
                print(*ret.keys())
                return

    st = deque()
    st.append(k)
    seen = {}
    seen[k] = True

    while len(st):
        node = st.pop()
        flag = True
        for neibor in G[node]:
            if neibor in ret:
                flag = False
            if neibor not in seen:
                st.append(neibor)
                seen[neibor] = True
        if flag:
            ret[node] = True
            if len(ret) == N // 2:
                print(*ret.keys())
                return

    print(*ret.keys())

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == "__main__":
    main()
