#!/usr/bin/env python3
import sys

NO = "Impossible"  # type: str


def solve(N: int, S: int, A: "List[int]", B: "List[int]"):
    C = [0] * N
    for i in range(N):
        C[i] = B[i] - A[i]
        S -= A[i]

    seen = {}
    seen[S] = []

    for i in range(N):
        nexs = {}
        for k, v in seen.items():
            if k - C[i] not in seen:
                nexs[k - C[i]] = v.copy() + [i]
        seen.update(nexs)
        if 0 in seen:
            ret = ["A"] * N
            for j in seen[0]:
                ret[j] = "B"
            print(*ret, sep="")
            return
    print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, S = map(int, input().split())
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i], B[i] = map(int, input().split())
    solve(N, S, A, B)


if __name__ == "__main__":
    main()


"""
差をとって操作による変動で考える
縮まるように貪欲　→　うまくいかなそう

N<100
全パターン2^N




"""
