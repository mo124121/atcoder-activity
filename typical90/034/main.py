#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, K: int, a: "List[int]"):
    scope = defaultdict(int)
    ret = 0
    left = -1
    for right in range(N):
        scope[a[right]] += 1
        while len(scope) > K:
            left += 1
            scope[a[left]] -= 1
            if scope[a[left]] == 0:
                del scope[a[left]]
        else:
            ret = max(ret, right - left)
    print(ret)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)


if __name__ == "__main__":
    main()
