#!/usr/bin/env python3
import sys


def calc_cost(Z, elec):
    ret = 0
    for z in Z:
        ret += abs(z - elec)
    return ret


def search_best(Z):
    Z.sort()
    z = Z[len(Z) // 2]
    cost = calc_cost(Z, z)
    return z, cost


def solve(N: int, X: "List[int]", Y: "List[int]"):
    x, x_cost = search_best(X)
    y, y_cost = search_best(Y)
    print(x_cost + y_cost)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, X, Y)


if __name__ == "__main__":
    main()
